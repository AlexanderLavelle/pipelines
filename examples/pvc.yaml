apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: volume-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.18, pipelines.kubeflow.org/pipeline_compilation_time: '2023-02-02T17:59:05.338035',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "volume-pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.18}
spec:
  entrypoint: volume-pipeline
  templates:
  - name: cat
    container:
      args: [cat /data/pipeline/file.txt]
      command: [sh, -c]
      image: alpine
      volumeMounts:
      - {mountPath: /data, name: dynamically-provisioned-vol}
    inputs:
      parameters:
      - {name: dynamically-provisioned-vol-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.18
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: dynamically-provisioned-vol
      persistentVolumeClaim: {claimName: '{{inputs.parameters.dynamically-provisioned-vol-name}}'}
  - name: dynamically-provisioned-vol
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: pvc1
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
          storageClassName: standard
    outputs:
      parameters:
      - name: dynamically-provisioned-vol-manifest
        valueFrom: {jsonPath: '{}'}
      - name: dynamically-provisioned-vol-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: dynamically-provisioned-vol-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.18
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: ingest
    container:
      args: [mkdir /mounted_data/pipeline && echo hello > /mounted_data/pipeline/file.txt]
      command: [sh, -c]
      image: alpine
      volumeMounts:
      - {mountPath: /mounted_data, name: dynamically-provisioned-vol}
    inputs:
      parameters:
      - {name: dynamically-provisioned-vol-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.18
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: dynamically-provisioned-vol
      persistentVolumeClaim: {claimName: '{{inputs.parameters.dynamically-provisioned-vol-name}}'}
  - name: kubernetes-resource-delete
    container:
      command: [kubectl, delete, PersistentVolumeClaim, '{{inputs.parameters.dynamically-provisioned-vol-name}}',
        --ignore-not-found, --output, name, --wait=false]
      image: gcr.io/cloud-builders/kubectl
    inputs:
      parameters:
      - {name: dynamically-provisioned-vol-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.18
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: volume-pipeline
    dag:
      tasks:
      - name: cat
        template: cat
        dependencies: [dynamically-provisioned-vol, ingest]
        arguments:
          parameters:
          - {name: dynamically-provisioned-vol-name, value: '{{tasks.dynamically-provisioned-vol.outputs.parameters.dynamically-provisioned-vol-name}}'}
      - {name: dynamically-provisioned-vol, template: dynamically-provisioned-vol}
      - name: ingest
        template: ingest
        dependencies: [dynamically-provisioned-vol]
        arguments:
          parameters:
          - {name: dynamically-provisioned-vol-name, value: '{{tasks.dynamically-provisioned-vol.outputs.parameters.dynamically-provisioned-vol-name}}'}
      - name: kubernetes-resource-delete
        template: kubernetes-resource-delete
        dependencies: [cat, dynamically-provisioned-vol]
        arguments:
          parameters:
          - {name: dynamically-provisioned-vol-name, value: '{{tasks.dynamically-provisioned-vol.outputs.parameters.dynamically-provisioned-vol-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
