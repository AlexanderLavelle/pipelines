apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: exit-handler-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-03-28T14:38:15.322082',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Downloads a message and
      prints it. The exit handler will run after the pipeline finishes (successfully
      or not).", "inputs": [{"default": "gs://ml-pipeline/shakespeare1.txt", "name":
      "url", "optional": true, "type": "String"}], "name": "exit-handler"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
spec:
  entrypoint: exit-handler
  templates:
  - name: download-from-gcs
    container:
      args: []
      command:
      - sh
      - -ex
      - -c
      - |
        if [ -n "${GOOGLE_APPLICATION_CREDENTIALS}" ]; then
            gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
        fi
        mkdir -p "$(dirname "$1")"
        gsutil -m cp -r "$0" "$1"
      - '{{inputs.parameters.url}}'
      - /tmp/outputs/Data/data
      image: google/cloud-sdk
    inputs:
      parameters:
      - {name: url}
    outputs:
      artifacts:
      - {name: download-from-gcs-Data, path: /tmp/outputs/Data/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"command": ["sh", "-ex", "-c", "if [ -n \"${GOOGLE_APPLICATION_CREDENTIALS}\"
          ]; then\n    gcloud auth activate-service-account --key-file=\"${GOOGLE_APPLICATION_CREDENTIALS}\"\nfi\nmkdir
          -p \"$(dirname \"$1\")\"\ngsutil -m cp -r \"$0\" \"$1\"\n", {"inputValue":
          "GCS path"}, {"outputPath": "Data"}], "image": "google/cloud-sdk"}}, "inputs":
          [{"name": "GCS path", "type": "String"}], "name": "Download from GCS", "outputs":
          [{"name": "Data"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "4d7872bb49aacb11e146fb11415653faa62b5d65c8d86823c37a5f6eb0ba5319", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/961b17fa6844e1d79e5d3686bb557d830d7b5a95/components/google-cloud/storage/download_blob/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"GCS path": "{{inputs.parameters.url}}"}'}
  - name: exit-handler
    inputs:
      parameters:
      - {name: url}
    dag:
      tasks:
      - name: exit-handler-1
        template: exit-handler-1
        arguments:
          parameters:
          - {name: url, value: '{{inputs.parameters.url}}'}
  - name: exit-handler-1
    inputs:
      parameters:
      - {name: url}
    dag:
      tasks:
      - name: download-from-gcs
        template: download-from-gcs
        arguments:
          parameters:
          - {name: url, value: '{{inputs.parameters.url}}'}
      - name: print-file
        template: print-file
        dependencies: [download-from-gcs]
        arguments:
          artifacts:
          - {name: download-from-gcs-Data, from: '{{tasks.download-from-gcs.outputs.artifacts.download-from-gcs-Data}}'}
  - name: exit-op
    container:
      args: [--user-input, user input data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def exit_op(user_input):
            """Checks pipeline run status."""
            print("User input: ", user_input)
            # print('Pipeline status: ', status.state)
            # print('Job resource name: ', status.pipeline_job_resource_name)
            # print('Pipeline task name: ', status.pipeline_task_name)
            # print('Error code: ', status.error_code)
            # print('Error message: ', status.error_message)

        import argparse
        _parser = argparse.ArgumentParser(prog='Exit op', description='Checks pipeline run status.')
        _parser.add_argument("--user-input", dest="user_input", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = exit_op(**_parsed_args)
      image: python:3.7
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Checks
          pipeline run status.", "implementation": {"container": {"args": ["--user-input",
          {"inputValue": "user_input"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def exit_op(user_input):\n    \"\"\"Checks pipeline run status.\"\"\"\n    print(\"User
          input: \", user_input)\n    # print(''Pipeline status: '', status.state)\n    #
          print(''Job resource name: '', status.pipeline_job_resource_name)\n    #
          print(''Pipeline task name: '', status.pipeline_task_name)\n    # print(''Error
          code: '', status.error_code)\n    # print(''Error message: '', status.error_message)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Exit op'', description=''Checks
          pipeline run status.'')\n_parser.add_argument(\"--user-input\", dest=\"user_input\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = exit_op(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "user_input", "type": "String"}], "name": "Exit op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"user_input": "user input data"}'}
  - name: print-file
    container:
      args: [--file, /tmp/inputs/file/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_file(file_path):
            """Print a file."""
            with open(file_path) as f:
                print(f.read())

        import argparse
        _parser = argparse.ArgumentParser(prog='Print file', description='Print a file.')
        _parser.add_argument("--file", dest="file_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_file(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: download-from-gcs-Data, path: /tmp/inputs/file/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          a file.", "implementation": {"container": {"args": ["--file", {"inputPath":
          "file"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_file(file_path):\n    \"\"\"Print a file.\"\"\"\n    with open(file_path)
          as f:\n        print(f.read())\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
          file'', description=''Print a file.'')\n_parser.add_argument(\"--file\",
          dest=\"file_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = print_file(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "file", "type": "Any"}], "name":
          "Print file"}', pipelines.kubeflow.org/component_ref: '{}'}
  arguments:
    parameters:
    - {name: url, value: 'gs://ml-pipeline/shakespeare1.txt'}
  serviceAccountName: pipeline-runner
  onExit: exit-op
