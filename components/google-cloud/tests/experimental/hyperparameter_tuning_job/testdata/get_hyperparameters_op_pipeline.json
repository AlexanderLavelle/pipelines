{
  "components": {
    "comp-get-hyperparameters": {
      "executorLabel": "exec-get-hyperparameters",
      "inputDefinitions": {
        "parameters": { "trial": { "parameterType": "STRING" } }
      },
      "outputDefinitions": {
        "parameters": { "output": { "parameterType": "LIST" } }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-get-hyperparameters": {
        "container": {
          "args": [
            "--trial",
            "{{$.inputs.parameters['trial']}}",
            "----output-paths",
            "{{$.outputs.parameters['output'].output_file}}"
          ],
          "command": [
            "sh",
            "-c",
            "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform==1.18.3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform==1.18.3' --user) && \"$0\" \"$@\"",
            "sh",
            "-ec",
            "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
            "def get_hyperparameters(trial):\n  \"\"\"Retrieves the hyperparameters from the given trial.\n\n  Args:\n      trial (str): Required. The intermediate JSON representation of a\n        hyperparameter tuning job trial.\n\n  Returns:\n      List representing the intermediate JSON representation of the\n      hyperparameters from the trial.\n  \"\"\"\n  from google.cloud.aiplatform_v1.types import study\n\n  trial_proto = study.Trial.from_json(trial)\n\n  return [\n      study.Trial.Parameter.to_json(param) for param in trial_proto.parameters\n  ]\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get hyperparameters', description='Retrieves the hyperparameters from the given trial.')\n_parser.add_argument(\"--trial\", dest=\"trial\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_hyperparameters(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
          ],
          "image": "python:3.10"
        }
      }
    }
  },
  "pipelineInfo": { "name": "get-hyperparameters-op-test" },
  "root": {
    "dag": {
      "tasks": {
        "get-hyperparameters": {
          "cachingOptions": { "enableCache": true },
          "componentRef": { "name": "comp-get-hyperparameters" },
          "inputs": {
            "parameters": {
              "trial": {
                "runtimeValue": {
                  "constant": "{\n \"id\": \"1\",\n \"state\": 4,\n \"parameters\": [\n {\n \"parameterId\": \"learning_rate\",\n \"value\": 0.03162277660168379\n },\n {\n \"parameterId\": \"momentum\",\n \"value\": 0.5\n },\n {\n \"parameterId\": \"num_neurons\",\n \"value\": 128.0\n }\n ],\n \"finalMeasurement\": {\n \"stepCount\": \"10\",\n \"metrics\": [\n {\n \"metricId\": \"accuracy\",\n \"value\": 0.734375\n }\n ]\n },\n \"startTime\": \"2021-12-10T00:41:57.675086142Z\",\n \"endTime\": \"2021-12-10T00:52:35Z\",\n \"name\": \"\",\n \"measurements\": [],\n \"clientId\": \"\",\n \"infeasibleReason\": \"\",\n \"customJob\": \"\"\n}"
                }
              }
            }
          },
          "taskInfo": { "name": "get-hyperparameters" }
        }
      }
    }
  }
}
