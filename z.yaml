# PIPELINE DEFINITION
# Name: demo-pipeline
components:
  comp-vertex-ai-request:
    executorLabel: exec-vertex-ai-request
    inputDefinitions:
      parameters:
        api_version:
          defaultValue: v1
          isOptional: true
          parameterType: STRING
        location:
          parameterType: STRING
        method:
          parameterType: STRING
        path_parameters:
          defaultValue: {}
          isOptional: true
          parameterType: STRUCT
        project:
          parameterType: STRING
        query_parameters:
          defaultValue: {}
          isOptional: true
          parameterType: STRUCT
        resource:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-vertex-ai-request:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - vertex_ai_request
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef vertex_ai_request(\n    project: str,\n    location: str,\n \
          \   resource: str,\n    method: str,\n    query_parameters: dict = {},\n\
          \    path_parameters: dict = {},\n    api_version: str = 'v1',\n):\n   \
          \ import requests\n    import os\n\n    def get_access_token():\n      \
          \  url = \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\"\
          \n        headers = {\"Metadata-Flavor\": \"Google\"}\n        response\
          \ = requests.get(url, headers=headers)\n        response.raise_for_status()\n\
          \        return response.json()[\"access_token\"]\n\n    ENDPOINT_BASE =\
          \ f'https://{location}-aiplatform.googleapis.com/{api_version}/projects/{project}/locations/{location}'\n\
          \n    method_map = {\n        'datasets': {\n            'methods': {\n\
          \                'get': ('GET', 'datasets/{name}'),\n                # 'create':\
          \ ('POST',),\n                # 'delete': ('DELETE',),\n               \
          \ # 'export': ('POST',),\n                # 'import': ('POST'),\n      \
          \          'list': ('GET', 'datasets'),\n                # 'patch': ('PATCH',),\n\
          \                # 'searchDataItems': ('GET',),\n            }\n       \
          \ }\n    }\n    print(\n        \"Hitting endpoint: \",\n        os.path.join(\n\
          \            ENDPOINT_BASE, method_map[resource]['methods'][method][1].format(\n\
          \                project=project, **path_parameters)))\n    headers = {\n\
          \        \"Authorization\": f\"Bearer {get_access_token()}\",\n        \"\
          Content-Type\": \"application/json\"\n    }\n    response = requests.request(\n\
          \        method=method_map[resource]['methods'][method][0],\n        url=os.path.join(\n\
          \            ENDPOINT_BASE, method_map[resource]['methods'][method][1].format(\n\
          \                project=project, **path_parameters)),\n        headers=headers,\n\
          \        params=query_parameters,\n    )\n    response.raise_for_status()\n\
          \n    print(\"Got response:\")\n    print(response.json())\n    print(\n\
          \        \"Here is where we would persist the artifact output based on the\
          \ method used and the response payload.\"\n    )\n\n"
        image: gcr.io/ml-pipeline/google-cloud-pipeline-components:2.3.1
pipelineInfo:
  name: demo-pipeline
root:
  dag:
    tasks:
      vertex-ai-request:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-vertex-ai-request
        inputs:
          parameters:
            location:
              runtimeValue:
                constant: us-central1
            method:
              runtimeValue:
                constant: get
            path_parameters:
              runtimeValue:
                constant:
                  name: '8622262432879869952'
            project:
              runtimeValue:
                constant: cjmccarthy-kfp
            resource:
              runtimeValue:
                constant: datasets
        taskInfo:
          name: vertex-ai-request
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
