// Copyright 2023 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: deployment_spec.proto

package deploymentspec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretAsVolume []*SecretAsVolumeItem `protobuf:"bytes,1,rep,name=secret_as_volume,json=secretAsVolume,proto3" json:"secret_as_volume,omitempty"`
	SecretAsEnv    []*SecretAsEnvItem    `protobuf:"bytes,2,rep,name=secret_as_env,json=secretAsEnv,proto3" json:"secret_as_env,omitempty"`
	PvcVolume      []*PVCVolume          `protobuf:"bytes,3,rep,name=pvc_volume,json=pvcVolume,proto3" json:"pvc_volume,omitempty"`
}

func (x *ExecutorConfig) Reset() {
	*x = ExecutorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployment_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorConfig) ProtoMessage() {}

func (x *ExecutorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_deployment_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorConfig.ProtoReflect.Descriptor instead.
func (*ExecutorConfig) Descriptor() ([]byte, []int) {
	return file_deployment_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutorConfig) GetSecretAsVolume() []*SecretAsVolumeItem {
	if x != nil {
		return x.SecretAsVolume
	}
	return nil
}

func (x *ExecutorConfig) GetSecretAsEnv() []*SecretAsEnvItem {
	if x != nil {
		return x.SecretAsEnv
	}
	return nil
}

func (x *ExecutorConfig) GetPvcVolume() []*PVCVolume {
	if x != nil {
		return x.PvcVolume
	}
	return nil
}

type SecretAsVolumeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the Secret
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// container path to mount the Secret data
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *SecretAsVolumeItem) Reset() {
	*x = SecretAsVolumeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployment_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretAsVolumeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretAsVolumeItem) ProtoMessage() {}

func (x *SecretAsVolumeItem) ProtoReflect() protoreflect.Message {
	mi := &file_deployment_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretAsVolumeItem.ProtoReflect.Descriptor instead.
func (*SecretAsVolumeItem) Descriptor() ([]byte, []int) {
	return file_deployment_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SecretAsVolumeItem) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretAsVolumeItem) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type SecretKeyToEnvMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// corresponds to a key of the Secret.data field
	SecretKey string `protobuf:"bytes,1,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// env var to which to set the value for secret_key
	EnvVarName string `protobuf:"bytes,2,opt,name=env_var_name,json=envVarName,proto3" json:"env_var_name,omitempty"`
}

func (x *SecretKeyToEnvMap) Reset() {
	*x = SecretKeyToEnvMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployment_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeyToEnvMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyToEnvMap) ProtoMessage() {}

func (x *SecretKeyToEnvMap) ProtoReflect() protoreflect.Message {
	mi := &file_deployment_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyToEnvMap.ProtoReflect.Descriptor instead.
func (*SecretKeyToEnvMap) Descriptor() ([]byte, []int) {
	return file_deployment_spec_proto_rawDescGZIP(), []int{2}
}

func (x *SecretKeyToEnvMap) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SecretKeyToEnvMap) GetEnvVarName() string {
	if x != nil {
		return x.EnvVarName
	}
	return ""
}

type SecretAsEnvItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the Secret
	SecretName string               `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	KeyToEnv   []*SecretKeyToEnvMap `protobuf:"bytes,2,rep,name=key_to_env,json=keyToEnv,proto3" json:"key_to_env,omitempty"`
}

func (x *SecretAsEnvItem) Reset() {
	*x = SecretAsEnvItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployment_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretAsEnvItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretAsEnvItem) ProtoMessage() {}

func (x *SecretAsEnvItem) ProtoReflect() protoreflect.Message {
	mi := &file_deployment_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretAsEnvItem.ProtoReflect.Descriptor instead.
func (*SecretAsEnvItem) Descriptor() ([]byte, []int) {
	return file_deployment_spec_proto_rawDescGZIP(), []int{3}
}

func (x *SecretAsEnvItem) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretAsEnvItem) GetKeyToEnv() []*SecretKeyToEnvMap {
	if x != nil {
		return x.KeyToEnv
	}
	return nil
}

type PVCVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier for the PVC
	//
	// Types that are assignable to Name:
	//	*PVCVolume_PvcName
	//	*PVCVolume_GeneratePvcName
	//	*PVCVolume_PvcReference
	Name isPVCVolume_Name `protobuf_oneof:"name"`
	// corresponds to PersistentVolumeClaim.spec.accessMode field
	AccessModes []string `protobuf:"bytes,4,rep,name=access_modes,json=accessModes,proto3" json:"access_modes,omitempty"`
	// corresponds to PersistentVolumeClaim.spec.resources.requests.storage field
	Size string `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	// corresponds to Container.volumeMounts[i].mountPath field
	MountPath string `protobuf:"bytes,6,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// corresponds to PersistentVolumeClaim.spec.storageClassName field
	StorageClass string `protobuf:"bytes,7,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	// corresponds to PersistentVolumeClaim.spec.volumeName field
	VolumeName string `protobuf:"bytes,8,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// instructs Argo compiler to add a delete volume task after this task
	Annotations *structpb.Struct `protobuf:"bytes,9,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// instructs Argo compiler to add a delete volume task after this task
	DeleteAfter bool `protobuf:"varint,10,opt,name=delete_after,json=deleteAfter,proto3" json:"delete_after,omitempty"`
	// the identifier for this PVC, so that downstream tasks that use the same
	// PVC can reference the PVC created for this task; instructs the Argo
	// compiler to use the same PVC name placeholder for downstream tasks
	CreatedPvcReference string `protobuf:"bytes,11,opt,name=created_pvc_reference,json=createdPvcReference,proto3" json:"created_pvc_reference,omitempty"`
}

func (x *PVCVolume) Reset() {
	*x = PVCVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployment_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVCVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVCVolume) ProtoMessage() {}

func (x *PVCVolume) ProtoReflect() protoreflect.Message {
	mi := &file_deployment_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVCVolume.ProtoReflect.Descriptor instead.
func (*PVCVolume) Descriptor() ([]byte, []int) {
	return file_deployment_spec_proto_rawDescGZIP(), []int{4}
}

func (m *PVCVolume) GetName() isPVCVolume_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *PVCVolume) GetPvcName() string {
	if x, ok := x.GetName().(*PVCVolume_PvcName); ok {
		return x.PvcName
	}
	return ""
}

func (x *PVCVolume) GetGeneratePvcName() string {
	if x, ok := x.GetName().(*PVCVolume_GeneratePvcName); ok {
		return x.GeneratePvcName
	}
	return ""
}

func (x *PVCVolume) GetPvcReference() string {
	if x, ok := x.GetName().(*PVCVolume_PvcReference); ok {
		return x.PvcReference
	}
	return ""
}

func (x *PVCVolume) GetAccessModes() []string {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *PVCVolume) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *PVCVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *PVCVolume) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *PVCVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *PVCVolume) GetAnnotations() *structpb.Struct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *PVCVolume) GetDeleteAfter() bool {
	if x != nil {
		return x.DeleteAfter
	}
	return false
}

func (x *PVCVolume) GetCreatedPvcReference() string {
	if x != nil {
		return x.CreatedPvcReference
	}
	return ""
}

type isPVCVolume_Name interface {
	isPVCVolume_Name()
}

type PVCVolume_PvcName struct {
	// name of an existing PVC resource
	PvcName string `protobuf:"bytes,1,opt,name=pvc_name,json=pvcName,proto3,oneof"`
}

type PVCVolume_GeneratePvcName struct {
	// suffix to append to to {{workflow.name}}- prefix
	// to enable a dynamically generated PVC name
	GeneratePvcName string `protobuf:"bytes,2,opt,name=generate_pvc_name,json=generatePvcName,proto3,oneof"`
}

type PVCVolume_PvcReference struct {
	// reference to a PVC created for another task
	// corresponds to the other task's created_pvc_reference value
	PvcReference string `protobuf:"bytes,3,opt,name=pvc_reference,json=pvcReference,proto3,oneof"`
}

func (*PVCVolume_PvcName) isPVCVolume_Name() {}

func (*PVCVolume_GeneratePvcName) isPVCVolume_Name() {}

func (*PVCVolume_PvcReference) isPVCVolume_Name() {}

var File_deployment_spec_proto protoreflect.FileDescriptor

var file_deployment_spec_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x41, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x73, 0x45, 0x6e, 0x76, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x73, 0x45, 0x6e, 0x76, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x76, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x56, 0x43, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09,
	0x70, 0x76, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x41, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x54, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x45, 0x6e,
	0x76, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41,
	0x73, 0x45, 0x6e, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x65, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x4d, 0x61,
	0x70, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x22, 0xb3, 0x03, 0x0a, 0x09,
	0x50, 0x56, 0x43, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x76, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x76, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x76, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x76, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x76, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x76, 0x63,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x75, 0x62, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deployment_spec_proto_rawDescOnce sync.Once
	file_deployment_spec_proto_rawDescData = file_deployment_spec_proto_rawDesc
)

func file_deployment_spec_proto_rawDescGZIP() []byte {
	file_deployment_spec_proto_rawDescOnce.Do(func() {
		file_deployment_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_deployment_spec_proto_rawDescData)
	})
	return file_deployment_spec_proto_rawDescData
}

var file_deployment_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_deployment_spec_proto_goTypes = []interface{}{
	(*ExecutorConfig)(nil),     // 0: deployment_spec.ExecutorConfig
	(*SecretAsVolumeItem)(nil), // 1: deployment_spec.SecretAsVolumeItem
	(*SecretKeyToEnvMap)(nil),  // 2: deployment_spec.SecretKeyToEnvMap
	(*SecretAsEnvItem)(nil),    // 3: deployment_spec.SecretAsEnvItem
	(*PVCVolume)(nil),          // 4: deployment_spec.PVCVolume
	(*structpb.Struct)(nil),    // 5: google.protobuf.Struct
}
var file_deployment_spec_proto_depIdxs = []int32{
	1, // 0: deployment_spec.ExecutorConfig.secret_as_volume:type_name -> deployment_spec.SecretAsVolumeItem
	3, // 1: deployment_spec.ExecutorConfig.secret_as_env:type_name -> deployment_spec.SecretAsEnvItem
	4, // 2: deployment_spec.ExecutorConfig.pvc_volume:type_name -> deployment_spec.PVCVolume
	2, // 3: deployment_spec.SecretAsEnvItem.key_to_env:type_name -> deployment_spec.SecretKeyToEnvMap
	5, // 4: deployment_spec.PVCVolume.annotations:type_name -> google.protobuf.Struct
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_deployment_spec_proto_init() }
func file_deployment_spec_proto_init() {
	if File_deployment_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deployment_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployment_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretAsVolumeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployment_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeyToEnvMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployment_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretAsEnvItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployment_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PVCVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deployment_spec_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PVCVolume_PvcName)(nil),
		(*PVCVolume_GeneratePvcName)(nil),
		(*PVCVolume_PvcReference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deployment_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deployment_spec_proto_goTypes,
		DependencyIndexes: file_deployment_spec_proto_depIdxs,
		MessageInfos:      file_deployment_spec_proto_msgTypes,
	}.Build()
	File_deployment_spec_proto = out.File
	file_deployment_spec_proto_rawDesc = nil
	file_deployment_spec_proto_goTypes = nil
	file_deployment_spec_proto_depIdxs = nil
}
